@use 'sass:math';
@use '../Input/Input.scss';
@use 'variables';
@use "../../styles/tools/elevation";
@use "../../styles/variables" as styles-variables;

@layer s_components{
.s-text-field__input {
	display: flex;
	flex-grow: 1;
	max-width: 100%;
	overflow: hidden;
	flex-wrap: wrap;
	align-items: center;
	min-height: 36px;
	padding: variables.$text-field-padding;
	line-height: variables.$text-field-line-height;
	// input[type='time'],
	// input[type='date'],
	// input[type='datetime-local'] {
	// 	opacity: 0;
	// 	transition: 0.3s;
	// }

	&.active {

		input[type='time'],
		input[type='date'],
		input[type='datetime-local'] {
			opacity: 1;
		}
	}

	label {
		position: absolute;
		max-width: 90%;
		overflow: hidden;
		text-overflow: ellipsis;
		top: variables.$text-field-label-top;
		pointer-events: none;
		transform-origin: top left;

		&.active {
			max-width: 133%;
			transform: variables.$text-field-label-active-transform;
		}
	}

	&>input,
	&>textarea {
		caret-color: inherit;
		flex: 1 1 auto;
		
		min-height: 20px;
		max-width: 100%;
		min-width: 0;
		--width: 100%;
		outline: none;
	}
}

.error .s-text-field__wrapper label,
.s-input.error .s-icon,
.s-input.error .s-input__details {
	color: inherit;
}

.s-text-field__wrapper {
	width: 100%;
	color: inherit;
	caret-color: currentColor;
	display: flex;
	align-items: center;

	transition: styles-variables.$primary-transition;

	&::before,
	&::after {
		border-radius: inherit;
		width: inherit;
		bottom: -1px;
		content: '';
		left: 0;
		position: absolute;
		transition: var(--primary-transition);
		pointer-events: none;
	}

	&::before {
		border-color: var(--theme-text-fields-border);
		border-style: solid;
		border-width: 0px;
	}

	&.line::before {
		border-width: thin 0 0 0;
	}

	&::after {
		background-color: currentColor;
		border-color: currentColor;
		border-style: solid;
		border-width: thin 0 thin 0;
		transform: scaleX(0);
	}

	&:hover {
		&::before {
			border-color: var(--theme-text-primary);
		}
	}

	&:focus-within {
		&::after {
			transform: scale(1);
		}

		label {
			color: inherit;
		}
	}

	&> {
		.s-prepend {
			margin-right: variables.$text-field-prepend-append-margin;
		}

		.s-append {
			--margin-right: variables.$text-field-prepend-append-margin;
		}
	}

	&.outlined {
		&::before {
			top: 0;
			border-width: thin;
		}

		&:focus-within::before {
			border-color: currentColor;
			border-width: 2px;
		}

		label {
			top: variables.$text-field-outlined-label-top;

			&.active {
				padding: 0 4px;
				background-color: var(--theme-surface);
				transform: variables.$text-field-outlined-label-active-transform;
			}
		}
	}

	&.outlined,
	&.solo,
	&.filled {
		padding: variables.$text-field-wrapper-padding;
	}

	&.filled,
	&.outlined {
		min-height: variables.$text-field-filled-outlined-min-height;
	}

	&.filled {
		border-radius: variables.$text-field-filled-border-radius;
		background-color: var(--theme-text-fields-filled);

		&:hover {
			background-color: var(--theme-text-fields-filled-hover);
		}

		input,
		textarea {
			padding-top: variables.$text-field-filled-margin-top;
		}

		label {
			top: variables.$text-field-filled-label-top;

			&.active {
				transform: variables.$text-field-filled-label-active-transform;
			}
		}
	}

	&.outlined,
	&.solo,
	&.rounded {
		&::after {
			display: none;
		}
	}

	&.outlined,
	&.solo {
		border-radius: variables.$text-field-border-radius;
	}

	&.solo {
		min-height: variables.$text-field-solo-min-height;
		@include elevation.elevation(variables.$text-field-solo-depth);

		&::before {
			display: none;
		}
	}

	&.rounded {
		border-radius: variables.$text-field-rounded-border-radius;

		&.filled::before {
			border: none;
		}

		&.outlined {
			padding: variables.$text-field-outlined-rounded-padding;
		}
	}

	&.flat {
		@include elevation.elevation(0, true);
	}
}

.s-text-field {

	&.error,
	&.success {
		.s-text-field__wrapper::before {
			border-color: currentColor !important;
		}
	}

	&.dense {
		input {
			padding: variables.$text-field-dense-padding;
		}

		.s-text-field__wrapper {

			&.outlined,
			&.filled {
				min-height: variables.$text-field-filled-outlined-dense-min-height;
			}

			&.outlined {
				label {
					top: variables.$text-field-outlined-dense-label-top;

					&.active {
						transform: variables.$text-field-outlined-dense-label-active-transform;
					}
				}
			}

			&.solo {
				min-height: variables.$text-field-solo-dense-min-height;
			}

			&.filled {

				input,
				textarea {
					--margin-top: math.div($text-field-filled-margin-top, 2);
				}

				label {
					top: variables.$text-field-filled-dense-label-top;

					&.active {
						transform: variables.$text-field-filled-dense-label-active-transform;
					}
				}
			}
		}
	}
}
}